#source("load_all_data.R")
#devtools::install_github("benmarwick/wordcountaddin")
library(wordcountaddin)
#wordcountaddin::text_stats("cogload_1to5.Rmd")
getwd()
blogdown:::serve_site()
#install.packages("devtools")
#devtools::install_github("crsh/papaja")
devtools::install_github("cillianmiltown/R_desnum")
#install.packages("devtools")
#devtools::install_github("crsh/papaja")
install.packages("quantreg")
install.packages("SparseM")
install.packages("quantreg")
install.packages("MatrixModels")
install.packages("quantreg")
devtools::install_github("cillianmiltown/R_desnum")
rm(list = ls())
# install.packages("viridis")
# install.packages("citr")
#
# install.packages("RefManageR")
# install.packages("shiny")
#
# install.packages("shinyjs")
#
#
# install.packages("miniUI")
# install.packages("car")
library(viridis)
library(citr)
#install.packages("sjstats")
library(plyr)
library(foreign)
library(car)
library(desnum)
library(ggplot2)
library(extrafont)
#install.packages("devtools")
#devtools::install_github("crsh/papaja")
# install.packages("SparseM")
# install.packages("MatrixModels")
# install.packages("quantreg")
#
# devtools::install_github("cillianmiltown/R_desnum")
library(papaja)
library("dplyr")
# install.packages("statmod")
# install.packages("minqa")
# install.packages("lme4")
# install.packages("reshape2")
#install.packages("afex")
library("afex")
library("tibble")
library(scales)
# install.packages("survival")
# install.packages("TH.data")
# install.packages("multcomp")
# install.packages("mutoss")
# help("install.packages")
# install.packages("multtest")
#
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# install.packages("BiocGenerics")
#
# BiocManager::install("BiocGenerics")
#BiocManager::install("multtest")
#install.packages("multtest", dependencies=TRUE, repos='http://cran.rstudio.com/')
#install.packages("plotrix")
#install.packages("metap")
library(metap)
#install.packages("pwr")
library(pwr)
#install.packages("lsr")
library(lsr)
#
# install.packages("rstan")
# install.packages("matrixStats")
# install.packages("checkmate")
# install.packages("loo")
# install.packages("V8")
# install.packages("matrixStats")
# install.packages("estimability")
# install.packages("emmeans")
#
# install.packages("brms")
# install.packages("coin")
# install.packages("igraph")
# install.packages("modeltools")
# install.packages("libcoin")
# install.packages("threejs")
# install.packages("base64enc")
# install.packages("gtools")
# install.packages("shinystan")
#install.packages("sjstats", dependencies=TRUE)
library(sjstats)
#install.packages("DescTools")
library(DescTools)
#inatall.packages("ggstatsplot")
#library(ggstatsplot)
#install.packages("VGAM")
library(VGAM)
#install.packages("nnet")
library(nnet)
#install.packages("Formula")
#install.packages("dfidx")
#install.packages("mlogit")
library(mlogit)
library(reshape2)
#install.packages("powerMediation")
library("powerMediation")
#install.packages("knitr")
library(knitr)
#install.packages("forestmangr")
library(forestmangr)
#source("load_all_data.R")
#devtools::install_github("benmarwick/wordcountaddin")
library(wordcountaddin)
#wordcountaddin::text_stats("cogload_1to5.Rmd")
getwd()
blogdown:::serve_site()
install.packages("DescTools")
install.packages("rstudioapi")
install.packages("DescTools")
blogdown:::serve_site()
# Chunk 1: setup
#knitr::opts_chunk$set(comment = NA, eval = FALSE)
knitr::opts_chunk$set(echo = FALSE)
# Chunk 2: load_libraries_cogload
rm(list = ls())
# install.packages("viridis")
# install.packages("citr")
#
# install.packages("RefManageR")
# install.packages("shiny")
#
# install.packages("shinyjs")
#
#
# install.packages("miniUI")
# install.packages("car")
library(viridis)
library(citr)
#install.packages("sjstats")
library(plyr)
library(foreign)
library(car)
library(desnum)
library(ggplot2)
library(extrafont)
#install.packages("devtools")
#devtools::install_github("crsh/papaja")
# install.packages("SparseM")
# install.packages("MatrixModels")
# install.packages("quantreg")
#
# devtools::install_github("cillianmiltown/R_desnum")
library(papaja)
library("dplyr")
# install.packages("statmod")
# install.packages("minqa")
# install.packages("lme4")
# install.packages("reshape2")
#install.packages("afex")
library("afex")
library("tibble")
library(scales)
# install.packages("survival")
# install.packages("TH.data")
# install.packages("multcomp")
# install.packages("mutoss")
# help("install.packages")
# install.packages("multtest")
#
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# install.packages("BiocGenerics")
#
# BiocManager::install("BiocGenerics")
#BiocManager::install("multtest")
#install.packages("multtest", dependencies=TRUE, repos='http://cran.rstudio.com/')
#install.packages("plotrix")
#install.packages("metap")
library(metap)
#install.packages("pwr")
library(pwr)
#install.packages("lsr")
library(lsr)
#
# install.packages("rstan")
# install.packages("matrixStats")
# install.packages("checkmate")
# install.packages("loo")
# install.packages("V8")
# install.packages("matrixStats")
# install.packages("estimability")
# install.packages("emmeans")
#
# install.packages("brms")
# install.packages("coin")
# install.packages("igraph")
# install.packages("modeltools")
# install.packages("libcoin")
# install.packages("threejs")
# install.packages("base64enc")
# install.packages("gtools")
# install.packages("shinystan")
#install.packages("sjstats", dependencies=TRUE)
library(sjstats)
#install.packages("rstudioapi")
#install.packages("DescTools")
library(DescTools)
#inatall.packages("ggstatsplot")
#library(ggstatsplot)
#install.packages("VGAM")
library(VGAM)
#install.packages("nnet")
library(nnet)
#install.packages("Formula")
#install.packages("dfidx")
#install.packages("mlogit")
library(mlogit)
library(reshape2)
#install.packages("powerMediation")
library("powerMediation")
#install.packages("knitr")
library(knitr)
#install.packages("forestmangr")
library(forestmangr)
#source("load_all_data.R")
#devtools::install_github("benmarwick/wordcountaddin")
library(wordcountaddin)
#wordcountaddin::text_stats("cogload_1to5.Rmd")
getwd()
# Chunk 3: colors1
r_slidetot <- 82
#Color Format
colFmt = function(x,color){
outputFormat = knitr::opts_knit$get("rmarkdown.pandoc.to")
if(outputFormat == 'latex')
paste("\\textcolor{",color,"}{",x,"}",sep="")
else if(outputFormat == 'html')
paste("<font color='",color,"'>",x,"</font>",sep="")
else
x
}
#rgb(255, 0, 0);
sentiment <- '#ff744e'
rational1 <- '#2faace'
rational <- '#248aa8'
conflict1 <- '#7d0552'
conflict <- '#2f8d2f'
cogload <- '#a0522d'
dual <- '#b93b8f'
lightgrey <- '#c0c0c0'
# \definecolor{sentiment}{RGB}{255, 115, 115} #ff7300 or #ff744e
#
# % \definecolor{rational}{RGB}{47,170,206} #2faace
#
# \definecolor{rational}{RGB}{36, 138, 168} #248aa8
#
# % \definecolor{conflict}{RGB}{125, 5, 82} #7d0552
#
# \definecolor{cogload}{RGB}{160, 82, 45} #a0522d
#
# \definecolor{conflict}{RGB}{47,141,47} #2f8d2f
#
# \definecolor{dual}{RGB}{185, 59, 143} #b93b8f
#
# \definecolor{lightgrey}{RGB}{192,192,192} #c0c0c0
# plotting:
# red dumbfounded
# yellow reasons
# blue nothing wrong
dumb_palette <- c('#ff3801','#ff4c1b','#ff6035','#ff744e','#ff8868','#ff9c81','#ffb09b','#ff744e') # https://www.colorhexa.com/ff744e
reasons_palette <- c('#ffb701','#ffbf1b','#ffc635','#ffcd4e','#ffd468','#ffdb81','#ffe39b','#ffcd4e') #https://www.colorhexa.com/ffcd4e
nothing_palette <- c('#0149ff','#1b5bff','#356eff','#4e80ff','#6892ff','#81a5ff','#9bb7ff','#4e80ff') # https://www.colorhexa.com/4e80ff
# Chunk 4
#load(project_filepath("static/data/searching.RData"))
#data(../../../static/data/searching.RData)
load("../../static/data/searching.RData")
#load("static/data/searching.RData")
# Chunk 5: reasons set up data Study 1
load("../../static/data/one.RData")
df3 <- study_1
x <- df3
# code for word numbers below (no hyphen possible using numbers2words function)
# numbers2words_cap1(length(df1$gender))
# numbers2words_cap1(length(df2$gender))
# Chunk 6: reasons set up data Study 2
load("../../static/data/two.RData")
df3 <- study_2
x <- df3
# code for word numbers below (no hyphen possible using numbers2words function)
# numbers2words_cap1(length(df1$gender))
# numbers2words_cap1(length(df2$gender))
# Chunk 7: reasons set up data Study 3
load("../../static/data/three.RData")
df3 <- study_3
x <- df3
# code for word numbers below (no hyphen possible using numbers2words function)
# numbers2words_cap1(length(df1$gender))
# numbers2words_cap1(length(df2$gender))
getwd()
setwd("content/post")
# Chunk 1: setup
#knitr::opts_chunk$set(comment = NA, eval = FALSE)
knitr::opts_chunk$set(echo = FALSE)
# Chunk 2: load_libraries_cogload
rm(list = ls())
# install.packages("viridis")
# install.packages("citr")
#
# install.packages("RefManageR")
# install.packages("shiny")
#
# install.packages("shinyjs")
#
#
# install.packages("miniUI")
# install.packages("car")
library(viridis)
library(citr)
#install.packages("sjstats")
library(plyr)
library(foreign)
library(car)
library(desnum)
library(ggplot2)
library(extrafont)
#install.packages("devtools")
#devtools::install_github("crsh/papaja")
# install.packages("SparseM")
# install.packages("MatrixModels")
# install.packages("quantreg")
#
# devtools::install_github("cillianmiltown/R_desnum")
library(papaja)
library("dplyr")
# install.packages("statmod")
# install.packages("minqa")
# install.packages("lme4")
# install.packages("reshape2")
#install.packages("afex")
library("afex")
library("tibble")
library(scales)
# install.packages("survival")
# install.packages("TH.data")
# install.packages("multcomp")
# install.packages("mutoss")
# help("install.packages")
# install.packages("multtest")
#
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# install.packages("BiocGenerics")
#
# BiocManager::install("BiocGenerics")
#BiocManager::install("multtest")
#install.packages("multtest", dependencies=TRUE, repos='http://cran.rstudio.com/')
#install.packages("plotrix")
#install.packages("metap")
library(metap)
#install.packages("pwr")
library(pwr)
#install.packages("lsr")
library(lsr)
#
# install.packages("rstan")
# install.packages("matrixStats")
# install.packages("checkmate")
# install.packages("loo")
# install.packages("V8")
# install.packages("matrixStats")
# install.packages("estimability")
# install.packages("emmeans")
#
# install.packages("brms")
# install.packages("coin")
# install.packages("igraph")
# install.packages("modeltools")
# install.packages("libcoin")
# install.packages("threejs")
# install.packages("base64enc")
# install.packages("gtools")
# install.packages("shinystan")
#install.packages("sjstats", dependencies=TRUE)
library(sjstats)
#install.packages("rstudioapi")
#install.packages("DescTools")
library(DescTools)
#inatall.packages("ggstatsplot")
#library(ggstatsplot)
#install.packages("VGAM")
library(VGAM)
#install.packages("nnet")
library(nnet)
#install.packages("Formula")
#install.packages("dfidx")
#install.packages("mlogit")
library(mlogit)
library(reshape2)
#install.packages("powerMediation")
library("powerMediation")
#install.packages("knitr")
library(knitr)
#install.packages("forestmangr")
library(forestmangr)
#source("load_all_data.R")
#devtools::install_github("benmarwick/wordcountaddin")
library(wordcountaddin)
#wordcountaddin::text_stats("cogload_1to5.Rmd")
getwd()
# Chunk 3: colors1
r_slidetot <- 82
#Color Format
colFmt = function(x,color){
outputFormat = knitr::opts_knit$get("rmarkdown.pandoc.to")
if(outputFormat == 'latex')
paste("\\textcolor{",color,"}{",x,"}",sep="")
else if(outputFormat == 'html')
paste("<font color='",color,"'>",x,"</font>",sep="")
else
x
}
#rgb(255, 0, 0);
sentiment <- '#ff744e'
rational1 <- '#2faace'
rational <- '#248aa8'
conflict1 <- '#7d0552'
conflict <- '#2f8d2f'
cogload <- '#a0522d'
dual <- '#b93b8f'
lightgrey <- '#c0c0c0'
# \definecolor{sentiment}{RGB}{255, 115, 115} #ff7300 or #ff744e
#
# % \definecolor{rational}{RGB}{47,170,206} #2faace
#
# \definecolor{rational}{RGB}{36, 138, 168} #248aa8
#
# % \definecolor{conflict}{RGB}{125, 5, 82} #7d0552
#
# \definecolor{cogload}{RGB}{160, 82, 45} #a0522d
#
# \definecolor{conflict}{RGB}{47,141,47} #2f8d2f
#
# \definecolor{dual}{RGB}{185, 59, 143} #b93b8f
#
# \definecolor{lightgrey}{RGB}{192,192,192} #c0c0c0
# plotting:
# red dumbfounded
# yellow reasons
# blue nothing wrong
dumb_palette <- c('#ff3801','#ff4c1b','#ff6035','#ff744e','#ff8868','#ff9c81','#ffb09b','#ff744e') # https://www.colorhexa.com/ff744e
reasons_palette <- c('#ffb701','#ffbf1b','#ffc635','#ffcd4e','#ffd468','#ffdb81','#ffe39b','#ffcd4e') #https://www.colorhexa.com/ffcd4e
nothing_palette <- c('#0149ff','#1b5bff','#356eff','#4e80ff','#6892ff','#81a5ff','#9bb7ff','#4e80ff') # https://www.colorhexa.com/4e80ff
# Chunk 4
#load(project_filepath("static/data/searching.RData"))
#data(../../../static/data/searching.RData)
load("../../static/data/searching.RData")
#load("static/data/searching.RData")
# Chunk 5: reasons set up data Study 1
load("../../static/data/one.RData")
df3 <- study_1
x <- df3
# code for word numbers below (no hyphen possible using numbers2words function)
# numbers2words_cap1(length(df1$gender))
# numbers2words_cap1(length(df2$gender))
# Chunk 6: reasons set up data Study 2
load("../../static/data/two.RData")
df3 <- study_2
x <- df3
# code for word numbers below (no hyphen possible using numbers2words function)
# numbers2words_cap1(length(df1$gender))
# numbers2words_cap1(length(df2$gender))
# Chunk 7: reasons set up data Study 3
load("../../static/data/three.RData")
df3 <- study_3
x <- df3
# code for word numbers below (no hyphen possible using numbers2words function)
# numbers2words_cap1(length(df1$gender))
# numbers2words_cap1(length(df2$gender))
df3 <- study_1
df_r1 <- rbind.data.frame(cbind(df3$InCS,
rep(1,length(length(df3$InCS)))),
cbind(df3$InCS[which(df3$Roz_fully_C==TRUE)],
rep(2,length(sum(df3$Roz_fully_C==TRUE,na.rm = TRUE)))),
cbind(df3$InCS[which(df3$eligible==TRUE)],
rep(3,length(sum(df3$eligible==TRUE,na.rm = TRUE)))))
colnames(df_r1) <- c("InCS", "convergence")
variable.names(df_r1)
y <- table(df_r1)
y <- as.data.frame(y)
z <- as.data.frame(table(df_r1$InCS,df_r1$convergence)/length(df3$InCS))
perc <- z$Freq
test <- cbind(y,perc)
test$InCS <- recode(test$InCS, '"1"="1nothing wrong";"2"="2no reason";"3"="3reason"')
test$InCS <- car::recode(test$InCS, '"1"="1nothing wrong";"2"="2no reason";"3"="3reason"')
test$sampleN <- c(rep(length(df3$gender),3),
rep(sum(df3$Roz_fully_C==TRUE,na.rm = TRUE),3),
rep(sum(df3$eligible==TRUE,na.rm = TRUE),3))
test$sample_perc <- test$Freq/test$sampleN
test$convergence <- car::recode(test$convergence, '"1"="1total sample";"2"="2fully convergent";"3"="3revised convergence"')
blogdown:::serve_site()
install.packages("labelling")
install.packages("labeling")
blogdown:::serve_site()
install.packages("utf8")
blogdown:::serve_site()
blogdown:::serve_site()
